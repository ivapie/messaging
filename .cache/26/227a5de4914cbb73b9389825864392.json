{"id":"../node_modules/gaxios/build/src/retry.js","dependencies":[{"name":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/gaxios/build/src/retry.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/Ivanchis/Desktop/Messaging/messaging/package.json","includedInParent":true,"mtime":1551481286000},{"name":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/gaxios/package.json","includedInParent":true,"mtime":1551222007000}],"generated":{"js":"\"use strict\";\n// Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getRetryConfig(err) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let config = getConfig(err);\n        if ((!err || !err.config) || (!config && !err.config.retry)) {\n            return { shouldRetry: false };\n        }\n        config = config || {};\n        config.currentRetryAttempt = config.currentRetryAttempt || 0;\n        config.retry =\n            (config.retry === undefined || config.retry === null) ? 3 : config.retry;\n        config.retryDelay = config.retryDelay || 100;\n        config.httpMethodsToRetry =\n            config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n        config.noResponseRetries = (config.noResponseRetries === undefined ||\n            config.noResponseRetries === null) ?\n            2 :\n            config.noResponseRetries;\n        // If this wasn't in the list of status codes where we want\n        // to automatically retry, return.\n        const retryRanges = [\n            // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n            // 1xx - Retry (Informational, request still processing)\n            // 2xx - Do not retry (Success)\n            // 3xx - Do not retry (Redirect)\n            // 4xx - Do not retry (Client errors)\n            // 429 - Retry (\"Too Many Requests\")\n            // 5xx - Retry (Server errors)\n            [100, 199], [429, 429], [500, 599]\n        ];\n        config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;\n        // Put the config back into the err\n        err.config.retryConfig = config;\n        // Determine if we should retry the request\n        const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n        if (!shouldRetryFn(err)) {\n            return { shouldRetry: false, config: err.config };\n        }\n        // Calculate time to wait with exponential backoff.\n        // Formula: (2^c - 1 / 2) * 1000\n        const delay = (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000;\n        // We're going to retry!  Incremenent the counter.\n        err.config.retryConfig.currentRetryAttempt += 1;\n        // Create a promise that invokes the retry after the backOffDelay\n        const backoff = new Promise(resolve => {\n            setTimeout(resolve, delay);\n        });\n        // Notify the user if they added an `onRetryAttempt` handler\n        if (config.onRetryAttempt) {\n            config.onRetryAttempt(err);\n        }\n        // Return the promise in which recalls Gaxios to retry the request\n        yield backoff;\n        return { shouldRetry: true, config: err.config };\n    });\n}\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\nfunction shouldRetryRequest(err) {\n    const config = getConfig(err);\n    // If there's no config, or retries are disabled, return.\n    if (!config || config.retry === 0) {\n        return false;\n    }\n    // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n    if (!err.response &&\n        ((config.currentRetryAttempt || 0) >= config.noResponseRetries)) {\n        return false;\n    }\n    // Only retry with configured HttpMethods.\n    if (!err.config.method ||\n        config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n        return false;\n    }\n    // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n    if (err.response && err.response.status) {\n        let isInRange = false;\n        for (const [min, max] of config.statusCodesToRetry) {\n            const status = err.response.status;\n            if (status >= min && status <= max) {\n                isInRange = true;\n                break;\n            }\n        }\n        if (!isInRange) {\n            return false;\n        }\n    }\n    // If we are out of retry attempts, return\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    if (config.currentRetryAttempt >= config.retry) {\n        return false;\n    }\n    return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\nfunction getConfig(err) {\n    if (err && err.config && err.config.retryConfig) {\n        return err.config.retryConfig;\n    }\n    return;\n}\n","map":{"version":3,"file":"retry.js","sourceRoot":"","sources":["../../src/retry.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"hash":"96f3c432099299c2cdddecbcbaddb504","cacheData":{"env":{}}}