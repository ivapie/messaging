{"id":"node_modules/@google-cloud/paginator/build/src/index.js","dependencies":[{"name":"/Users/ivanpiedra/Desktop/test/package.json","includedInParent":true,"mtime":1550784608667},{"name":"/Users/ivanpiedra/Desktop/test/node_modules/@google-cloud/paginator/package.json","includedInParent":true,"mtime":1550784604862},{"name":"arrify","loc":{"line":21,"column":23},"parent":"/Users/ivanpiedra/Desktop/test/node_modules/@google-cloud/paginator/build/src/index.js","resolved":"/Users/ivanpiedra/Desktop/test/node_modules/arrify/index.js"},{"name":"extend","loc":{"line":22,"column":23},"parent":"/Users/ivanpiedra/Desktop/test/node_modules/@google-cloud/paginator/build/src/index.js","resolved":"/Users/ivanpiedra/Desktop/test/node_modules/extend/index.js"},{"name":"is","loc":{"line":23,"column":19},"parent":"/Users/ivanpiedra/Desktop/test/node_modules/@google-cloud/paginator/build/src/index.js","resolved":"/Users/ivanpiedra/Desktop/test/node_modules/is/index.js"},{"name":"split-array-stream","loc":{"line":24,"column":37},"parent":"/Users/ivanpiedra/Desktop/test/node_modules/@google-cloud/paginator/build/src/index.js","resolved":"/Users/ivanpiedra/Desktop/test/node_modules/split-array-stream/build/src/index.js"},{"name":"stream","loc":{"line":25,"column":25},"parent":"/Users/ivanpiedra/Desktop/test/node_modules/@google-cloud/paginator/build/src/index.js","resolved":"/Users/ivanpiedra/Desktop/test/node_modules/stream-browserify/index.js"},{"name":"stream-events","loc":{"line":26,"column":29},"parent":"/Users/ivanpiedra/Desktop/test/node_modules/@google-cloud/paginator/build/src/index.js","resolved":"/Users/ivanpiedra/Desktop/test/node_modules/stream-events/index.js"}],"generated":{"js":"\"use strict\";\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*!\n * @module common/paginator\n */\nconst arrify = require(\"arrify\");\nconst extend = require(\"extend\");\nconst is = require(\"is\");\nconst split_array_stream_1 = require(\"split-array-stream\");\nconst stream_1 = require(\"stream\");\nconst streamEvents = require(\"stream-events\");\n/**\n * Limit requests according to a `maxApiCalls` limit.\n *\n * @param {function} makeRequestFn - The function that will be called.\n * @param {object=} options - Configuration object.\n * @param {number} options.maxApiCalls - The maximum number of API calls to make.\n * @param {object} options.streamOptions - Options to pass to the Stream constructor.\n */\nfunction createLimiter(makeRequestFn, options) {\n    options = options || {};\n    const streamOptions = options.streamOptions || {};\n    streamOptions.objectMode = true;\n    const stream = streamEvents(new stream_1.Transform(streamOptions));\n    let requestsMade = 0;\n    let requestsToMake = -1;\n    if (is.number(options.maxApiCalls)) {\n        requestsToMake = options.maxApiCalls;\n    }\n    return {\n        // tslint:disable-next-line:no-any\n        makeRequest(...args) {\n            requestsMade++;\n            if (requestsToMake >= 0 && requestsMade > requestsToMake) {\n                stream.push(null);\n                return;\n            }\n            makeRequestFn.apply(null, args);\n            return stream;\n        },\n        stream,\n    };\n}\nexports.createLimiter = createLimiter;\n/*! Developer Documentation\n *\n * paginator is used to auto-paginate `nextQuery` methods as well as\n * streamifying them.\n *\n * Before:\n *\n *   search.query('done=true', function(err, results, nextQuery) {\n *     search.query(nextQuery, function(err, results, nextQuery) {});\n *   });\n *\n * After:\n *\n *   search.query('done=true', function(err, results) {});\n *\n * Methods to extend should be written to accept callbacks and return a\n * `nextQuery`.\n */\nclass Paginator {\n    /**\n     * Cache the original method, then overwrite it on the Class's prototype.\n     *\n     * @param {function} Class - The parent class of the methods to extend.\n     * @param {string|string[]} methodNames - Name(s) of the methods to extend.\n     */\n    // tslint:disable-next-line:variable-name\n    extend(Class, methodNames) {\n        methodNames = arrify(methodNames);\n        methodNames.forEach(methodName => {\n            const originalMethod = Class.prototype[methodName];\n            // map the original method to a private member\n            Class.prototype[methodName + '_'] = originalMethod;\n            // overwrite the original to auto-paginate\n            // tslint:disable-next-line:no-any\n            Class.prototype[methodName] = function (...args) {\n                const parsedArguments = paginator.parseArguments_(args);\n                return paginator.run_(parsedArguments, originalMethod.bind(this));\n            };\n        });\n    }\n    /**\n     * Wraps paginated API calls in a readable object stream.\n     *\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {string} methodName - Name of the method to streamify.\n     * @return {function} - Wrapped function.\n     */\n    streamify(methodName) {\n        // tslint:disable-next-line:no-any\n        return function (...args) {\n            const parsedArguments = paginator.parseArguments_(args);\n            const originalMethod = this[methodName + '_'] || this[methodName];\n            return paginator.runAsStream_(parsedArguments, originalMethod.bind(this));\n        };\n    }\n    /**\n     * Parse a pseudo-array `arguments` for a query and callback.\n     *\n     * @param {array} args - The original `arguments` pseduo-array that the original\n     *     method received.\n     */\n    // tslint:disable-next-line:no-any\n    parseArguments_(args) {\n        let query;\n        let autoPaginate = true;\n        let maxApiCalls = -1;\n        let maxResults = -1;\n        let callback;\n        const firstArgument = args[0];\n        const lastArgument = args[args.length - 1];\n        if (is.fn(firstArgument)) {\n            callback = firstArgument;\n        }\n        else {\n            query = firstArgument;\n        }\n        if (is.fn(lastArgument)) {\n            callback = lastArgument;\n        }\n        if (typeof query === 'object') {\n            query = extend(true, {}, query);\n            // Check if the user only asked for a certain amount of results.\n            if (query.maxResults && is.number(query.maxResults)) {\n                // `maxResults` is used API-wide.\n                maxResults = query.maxResults;\n            }\n            else if (is.number(query.pageSize)) {\n                // `pageSize` is Pub/Sub's `maxResults`.\n                maxResults = query.pageSize;\n            }\n            if (query.maxApiCalls && is.number(query.maxApiCalls)) {\n                maxApiCalls = query.maxApiCalls;\n                delete query.maxApiCalls;\n            }\n            // maxResults is the user specified a limit.\n            if (callback && (maxResults !== -1 || query.autoPaginate === false)) {\n                autoPaginate = false;\n            }\n        }\n        const parsedArguments = {\n            query: query || {},\n            autoPaginate,\n            maxApiCalls,\n            maxResults,\n            callback,\n        };\n        parsedArguments.streamOptions = extend(true, {}, parsedArguments.query);\n        delete parsedArguments.streamOptions.autoPaginate;\n        delete parsedArguments.streamOptions.maxResults;\n        delete parsedArguments.streamOptions.pageSize;\n        return parsedArguments;\n    }\n    /**\n     * This simply checks to see if `autoPaginate` is set or not, if it's true\n     * then we buffer all results, otherwise simply call the original method.\n     *\n     * @param {array} parsedArguments - Parsed arguments from the original method\n     *     call.\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     */\n    run_(parsedArguments, originalMethod) {\n        const query = parsedArguments.query;\n        const callback = parsedArguments.callback;\n        if (parsedArguments.autoPaginate) {\n            const results = new Array();\n            paginator.runAsStream_(parsedArguments, originalMethod)\n                .on('error', callback)\n                .on('data', (data) => results.push(data))\n                .on('end', () => callback(null, results));\n        }\n        else {\n            originalMethod(query, callback);\n        }\n    }\n    /**\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     * @return {stream} - Readable object stream.\n     */\n    runAsStream_(parsedArguments, originalMethod) {\n        const query = parsedArguments.query;\n        let resultsToSend = parsedArguments.maxResults;\n        const limiter = exports.createLimiter(makeRequest, {\n            maxApiCalls: parsedArguments.maxApiCalls,\n            streamOptions: parsedArguments.streamOptions,\n        });\n        const stream = limiter.stream;\n        stream.once('reading', () => {\n            limiter.makeRequest(query);\n        });\n        function makeRequest(query) {\n            originalMethod(query, onResultSet);\n        }\n        // tslint:disable-next-line:no-any\n        function onResultSet(err, results, nextQuery) {\n            if (err) {\n                stream.destroy(err);\n                return;\n            }\n            if (resultsToSend >= 0 && results.length > resultsToSend) {\n                results = results.splice(0, resultsToSend);\n            }\n            resultsToSend -= results.length;\n            split_array_stream_1.split(results, stream).then(streamEnded => {\n                if (streamEnded) {\n                    return;\n                }\n                if (nextQuery && resultsToSend !== 0) {\n                    limiter.makeRequest(nextQuery);\n                    return;\n                }\n                stream.push(null);\n            });\n        }\n        return limiter.stream;\n    }\n}\nexports.Paginator = Paginator;\nconst paginator = new Paginator();\nexports.paginator = paginator;\n","map":{"mappings":[{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@google-cloud/paginator/build/src/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}}],"sources":{"node_modules/@google-cloud/paginator/build/src/index.js":"\"use strict\";\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*!\n * @module common/paginator\n */\nconst arrify = require(\"arrify\");\nconst extend = require(\"extend\");\nconst is = require(\"is\");\nconst split_array_stream_1 = require(\"split-array-stream\");\nconst stream_1 = require(\"stream\");\nconst streamEvents = require(\"stream-events\");\n/**\n * Limit requests according to a `maxApiCalls` limit.\n *\n * @param {function} makeRequestFn - The function that will be called.\n * @param {object=} options - Configuration object.\n * @param {number} options.maxApiCalls - The maximum number of API calls to make.\n * @param {object} options.streamOptions - Options to pass to the Stream constructor.\n */\nfunction createLimiter(makeRequestFn, options) {\n    options = options || {};\n    const streamOptions = options.streamOptions || {};\n    streamOptions.objectMode = true;\n    const stream = streamEvents(new stream_1.Transform(streamOptions));\n    let requestsMade = 0;\n    let requestsToMake = -1;\n    if (is.number(options.maxApiCalls)) {\n        requestsToMake = options.maxApiCalls;\n    }\n    return {\n        // tslint:disable-next-line:no-any\n        makeRequest(...args) {\n            requestsMade++;\n            if (requestsToMake >= 0 && requestsMade > requestsToMake) {\n                stream.push(null);\n                return;\n            }\n            makeRequestFn.apply(null, args);\n            return stream;\n        },\n        stream,\n    };\n}\nexports.createLimiter = createLimiter;\n/*! Developer Documentation\n *\n * paginator is used to auto-paginate `nextQuery` methods as well as\n * streamifying them.\n *\n * Before:\n *\n *   search.query('done=true', function(err, results, nextQuery) {\n *     search.query(nextQuery, function(err, results, nextQuery) {});\n *   });\n *\n * After:\n *\n *   search.query('done=true', function(err, results) {});\n *\n * Methods to extend should be written to accept callbacks and return a\n * `nextQuery`.\n */\nclass Paginator {\n    /**\n     * Cache the original method, then overwrite it on the Class's prototype.\n     *\n     * @param {function} Class - The parent class of the methods to extend.\n     * @param {string|string[]} methodNames - Name(s) of the methods to extend.\n     */\n    // tslint:disable-next-line:variable-name\n    extend(Class, methodNames) {\n        methodNames = arrify(methodNames);\n        methodNames.forEach(methodName => {\n            const originalMethod = Class.prototype[methodName];\n            // map the original method to a private member\n            Class.prototype[methodName + '_'] = originalMethod;\n            // overwrite the original to auto-paginate\n            // tslint:disable-next-line:no-any\n            Class.prototype[methodName] = function (...args) {\n                const parsedArguments = paginator.parseArguments_(args);\n                return paginator.run_(parsedArguments, originalMethod.bind(this));\n            };\n        });\n    }\n    /**\n     * Wraps paginated API calls in a readable object stream.\n     *\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {string} methodName - Name of the method to streamify.\n     * @return {function} - Wrapped function.\n     */\n    streamify(methodName) {\n        // tslint:disable-next-line:no-any\n        return function (...args) {\n            const parsedArguments = paginator.parseArguments_(args);\n            const originalMethod = this[methodName + '_'] || this[methodName];\n            return paginator.runAsStream_(parsedArguments, originalMethod.bind(this));\n        };\n    }\n    /**\n     * Parse a pseudo-array `arguments` for a query and callback.\n     *\n     * @param {array} args - The original `arguments` pseduo-array that the original\n     *     method received.\n     */\n    // tslint:disable-next-line:no-any\n    parseArguments_(args) {\n        let query;\n        let autoPaginate = true;\n        let maxApiCalls = -1;\n        let maxResults = -1;\n        let callback;\n        const firstArgument = args[0];\n        const lastArgument = args[args.length - 1];\n        if (is.fn(firstArgument)) {\n            callback = firstArgument;\n        }\n        else {\n            query = firstArgument;\n        }\n        if (is.fn(lastArgument)) {\n            callback = lastArgument;\n        }\n        if (typeof query === 'object') {\n            query = extend(true, {}, query);\n            // Check if the user only asked for a certain amount of results.\n            if (query.maxResults && is.number(query.maxResults)) {\n                // `maxResults` is used API-wide.\n                maxResults = query.maxResults;\n            }\n            else if (is.number(query.pageSize)) {\n                // `pageSize` is Pub/Sub's `maxResults`.\n                maxResults = query.pageSize;\n            }\n            if (query.maxApiCalls && is.number(query.maxApiCalls)) {\n                maxApiCalls = query.maxApiCalls;\n                delete query.maxApiCalls;\n            }\n            // maxResults is the user specified a limit.\n            if (callback && (maxResults !== -1 || query.autoPaginate === false)) {\n                autoPaginate = false;\n            }\n        }\n        const parsedArguments = {\n            query: query || {},\n            autoPaginate,\n            maxApiCalls,\n            maxResults,\n            callback,\n        };\n        parsedArguments.streamOptions = extend(true, {}, parsedArguments.query);\n        delete parsedArguments.streamOptions.autoPaginate;\n        delete parsedArguments.streamOptions.maxResults;\n        delete parsedArguments.streamOptions.pageSize;\n        return parsedArguments;\n    }\n    /**\n     * This simply checks to see if `autoPaginate` is set or not, if it's true\n     * then we buffer all results, otherwise simply call the original method.\n     *\n     * @param {array} parsedArguments - Parsed arguments from the original method\n     *     call.\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     */\n    run_(parsedArguments, originalMethod) {\n        const query = parsedArguments.query;\n        const callback = parsedArguments.callback;\n        if (parsedArguments.autoPaginate) {\n            const results = new Array();\n            paginator.runAsStream_(parsedArguments, originalMethod)\n                .on('error', callback)\n                .on('data', (data) => results.push(data))\n                .on('end', () => callback(null, results));\n        }\n        else {\n            originalMethod(query, callback);\n        }\n    }\n    /**\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     * @return {stream} - Readable object stream.\n     */\n    runAsStream_(parsedArguments, originalMethod) {\n        const query = parsedArguments.query;\n        let resultsToSend = parsedArguments.maxResults;\n        const limiter = exports.createLimiter(makeRequest, {\n            maxApiCalls: parsedArguments.maxApiCalls,\n            streamOptions: parsedArguments.streamOptions,\n        });\n        const stream = limiter.stream;\n        stream.once('reading', () => {\n            limiter.makeRequest(query);\n        });\n        function makeRequest(query) {\n            originalMethod(query, onResultSet);\n        }\n        // tslint:disable-next-line:no-any\n        function onResultSet(err, results, nextQuery) {\n            if (err) {\n                stream.destroy(err);\n                return;\n            }\n            if (resultsToSend >= 0 && results.length > resultsToSend) {\n                results = results.splice(0, resultsToSend);\n            }\n            resultsToSend -= results.length;\n            split_array_stream_1.split(results, stream).then(streamEnded => {\n                if (streamEnded) {\n                    return;\n                }\n                if (nextQuery && resultsToSend !== 0) {\n                    limiter.makeRequest(nextQuery);\n                    return;\n                }\n                stream.push(null);\n            });\n        }\n        return limiter.stream;\n    }\n}\nexports.Paginator = Paginator;\nconst paginator = new Paginator();\nexports.paginator = paginator;\n"},"lineCount":266}},"hash":"e81909f8d55e53eb61ed8c63966a9322","cacheData":{"env":{}}}