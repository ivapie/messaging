{"id":"../node_modules/googleapis-common/build/src/apirequest.js","dependencies":[{"name":"/Users/Ivanchis/Desktop/Messaging/messaging/package.json","includedInParent":true,"mtime":1551481286000},{"name":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/googleapis-common/package.json","includedInParent":true,"mtime":1551479865000},{"name":"google-auth-library","loc":{"line":23,"column":38},"parent":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/googleapis-common/build/src/apirequest.js","resolved":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/google-auth-library/build/src/index.js"},{"name":"qs","loc":{"line":24,"column":19},"parent":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/googleapis-common/build/src/apirequest.js","resolved":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/qs/lib/index.js"},{"name":"stream","loc":{"line":25,"column":23},"parent":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/googleapis-common/build/src/apirequest.js","resolved":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/stream-browserify/index.js"},{"name":"url-template","loc":{"line":26,"column":28},"parent":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/googleapis-common/build/src/apirequest.js","resolved":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/url-template/lib/url-template.js"},{"name":"uuid","loc":{"line":27,"column":21},"parent":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/googleapis-common/build/src/apirequest.js","resolved":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/uuid/index.js"},{"name":"./isbrowser","loc":{"line":28,"column":28},"parent":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/googleapis-common/build/src/apirequest.js","resolved":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/googleapis-common/build/src/isbrowser.js"},{"name":"../../package.json","loc":{"line":30,"column":20},"parent":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/googleapis-common/build/src/apirequest.js","resolved":"/Users/Ivanchis/Desktop/Messaging/messaging/node_modules/googleapis-common/package.json"}],"generated":{"js":"\"use strict\";\n// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst qs = require(\"qs\");\nconst stream = require(\"stream\");\nconst urlTemplate = require(\"url-template\");\nconst uuid = require(\"uuid\");\nconst isbrowser_1 = require(\"./isbrowser\");\n// tslint:disable-next-line no-var-requires\nconst pkg = require('../../package.json');\nfunction isReadableStream(obj) {\n    return obj instanceof stream.Readable && typeof obj._read === 'function';\n}\nfunction getMissingParams(params, required) {\n    const missing = new Array();\n    required.forEach(param => {\n        // Is the required param in the params object?\n        if (params[param] === undefined) {\n            missing.push(param);\n        }\n    });\n    // If there are any required params missing, return their names in array,\n    // otherwise return null\n    return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n    if (callback) {\n        createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n    }\n    else {\n        return createAPIRequestAsync(parameters);\n    }\n}\nexports.createAPIRequest = createAPIRequest;\nfunction createAPIRequestAsync(parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let params = parameters.params;\n        const options = Object.assign({}, parameters.options);\n        // Create a new params object so it can no longer be modified from outside\n        // code Also support global and per-client params, but allow them to be\n        // overriden per-request\n        const topOptions = parameters.context.google ?\n            parameters.context.google._options.params :\n            {};\n        params = Object.assign({}, // New base object\n        topOptions, // Global params\n        parameters.context._options.params, // Per-client params\n        params // API call params\n        );\n        const media = params.media || {};\n        /**\n         * In a previous version of this API, the request body was stuffed in a field\n         * named `resource`.  This caused lots of problems, because it's not uncommon\n         * to have an actual named parameter required which is also named `resource`.\n         * This mean that users would have to use `resource_` in those cases, which\n         * pretty much nobody figures out on their own. The request body is now\n         * documented as being in the `requestBody` property, but we also need to keep\n         * using `resource` for reasons of back-compat. Cases that need to be covered\n         * here:\n         * - user provides just a `resource` with a request body\n         * - user provides both a `resource` and a `resource_`\n         * - user provides just a `requestBody`\n         * - user provides both a `requestBody` and a `resource`\n         */\n        const resource = params.requestBody ? params.requestBody : params.resource;\n        if (!params.requestBody && params.resource) {\n            delete params.resource;\n        }\n        delete params.requestBody;\n        let authClient = params.auth || parameters.context._options.auth ||\n            (parameters.context.google ? parameters.context.google._options.auth :\n                null);\n        const defaultMime = typeof media.body === 'string' ?\n            'text/plain' :\n            'application/octet-stream';\n        delete params.media;\n        delete params.auth;\n        // Grab headers from user provided options\n        const headers = params.headers || {};\n        delete params.headers;\n        // Un-alias parameters that were modified due to conflicts with reserved names\n        Object.keys(params).forEach(key => {\n            if (key.slice(-1) === '_') {\n                const newKey = key.slice(0, -1);\n                params[newKey] = params[key];\n                delete params[key];\n            }\n        });\n        // Check for missing required parameters in the API request\n        const missingParams = getMissingParams(params, parameters.requiredParams);\n        if (missingParams) {\n            // Some params are missing - stop further operations and inform the\n            // developer which required params are not included in the request\n            throw new Error('Missing required parameters: ' + missingParams.join(', '));\n        }\n        // Parse urls\n        if (options.url) {\n            options.url = urlTemplate.parse(options.url).expand(params);\n        }\n        if (parameters.mediaUrl) {\n            parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n        }\n        // When forming the querystring, override the serializer so that array\n        // values are serialized like this:\n        // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n        // This serializer also encodes spaces in the querystring as `%20`,\n        // whereas the default serializer in gaxios encodes to a `+`.\n        options.paramsSerializer = (params) => {\n            return qs.stringify(params, { arrayFormat: 'repeat' });\n        };\n        // delete path parameters from the params object so they do not end up in\n        // query\n        parameters.pathParams.forEach(param => {\n            delete params[param];\n        });\n        // if authClient is actually a string, use it as an API KEY\n        if (typeof authClient === 'string') {\n            params.key = params.key || authClient;\n            authClient = undefined;\n        }\n        if (parameters.mediaUrl && media.body) {\n            options.url = parameters.mediaUrl;\n            if (resource) {\n                // gaxios doesn't support multipart/related uploads, so it has to\n                // be implemented here.\n                params.uploadType = 'multipart';\n                const multipart = [\n                    { 'Content-Type': 'application/json', body: JSON.stringify(resource) }, {\n                        'Content-Type': media.mimeType || (resource && resource.mimeType) || defaultMime,\n                        body: media.body // can be a readable stream or raw string!\n                    }\n                ];\n                const boundary = uuid.v4();\n                const finale = `--${boundary}--`;\n                const rStream = new stream.PassThrough({\n                    flush(callback) {\n                        this.push('\\r\\n');\n                        this.push(finale);\n                        callback();\n                    }\n                });\n                const pStream = new ProgressStream();\n                const isStream = isReadableStream(multipart[1].body);\n                headers['Content-Type'] = `multipart/related; boundary=${boundary}`;\n                for (const part of multipart) {\n                    const preamble = `--${boundary}\\r\\nContent-Type: ${part['Content-Type']}\\r\\n\\r\\n`;\n                    rStream.push(preamble);\n                    if (typeof part.body === 'string') {\n                        rStream.push(part.body);\n                        rStream.push('\\r\\n');\n                    }\n                    else {\n                        // Gaxios does not natively support onUploadProgress in node.js.\n                        // Pipe through the pStream first to read the number of bytes read\n                        // for the purpose of tracking progress.\n                        pStream.on('progress', bytesRead => {\n                            if (options.onUploadProgress) {\n                                options.onUploadProgress({ bytesRead });\n                            }\n                        });\n                        part.body.pipe(pStream).pipe(rStream);\n                    }\n                }\n                if (!isStream) {\n                    rStream.push(finale);\n                    rStream.push(null);\n                }\n                options.data = rStream;\n            }\n            else {\n                params.uploadType = 'media';\n                Object.assign(headers, { 'Content-Type': media.mimeType || defaultMime });\n                options.data = media.body;\n            }\n        }\n        else {\n            options.data = resource || undefined;\n        }\n        options.headers = headers;\n        options.params = params;\n        if (!isbrowser_1.isBrowser()) {\n            options.headers['Accept-Encoding'] = 'gzip';\n            const directives = options.userAgentDirectives || [];\n            directives.push({\n                product: 'google-api-nodejs-client',\n                version: pkg.version,\n                comment: 'gzip'\n            });\n            const userAgent = directives\n                .map(d => {\n                let line = `${d.product}/${d.version}`;\n                if (d.comment) {\n                    line += ` (${d.comment})`;\n                }\n                return line;\n            })\n                .join(' ');\n            options.headers['User-Agent'] = userAgent;\n        }\n        // By default gaxios treats any 2xx as valid, and all non 2xx status\n        // codes as errors.  This is a problem for HTTP 304s when used along\n        // with an eTag.\n        if (!options.validateStatus) {\n            options.validateStatus = (status) => {\n                return (status >= 200 && status < 300) || status === 304;\n            };\n        }\n        // Combine the GaxiosOptions options passed with this specific\n        // API call witht the global options configured at the API Context\n        // level, or at the global level.\n        const mergedOptions = Object.assign({}, (parameters.context.google ? parameters.context.google._options : {}), parameters.context._options, options);\n        delete mergedOptions.auth; // is overridden by our auth code\n        // Perform the HTTP request.  NOTE: this function used to return a\n        // mikeal/request object. Since the transition to Axios, the method is\n        // now void.  This may be a source of confusion for users upgrading from\n        // version 24.0 -> 25.0 or up.\n        if (authClient && typeof authClient === 'object') {\n            return authClient.request(mergedOptions);\n        }\n        else {\n            return (new google_auth_library_1.DefaultTransporter()).request(mergedOptions);\n        }\n    });\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // tslint:disable-next-line: no-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', this.bytesRead);\n        this.push(chunk);\n        callback();\n    }\n}\n","map":{"mappings":[{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/googleapis-common/build/src/apirequest.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}}],"sources":{"../node_modules/googleapis-common/build/src/apirequest.js":"\"use strict\";\n// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst qs = require(\"qs\");\nconst stream = require(\"stream\");\nconst urlTemplate = require(\"url-template\");\nconst uuid = require(\"uuid\");\nconst isbrowser_1 = require(\"./isbrowser\");\n// tslint:disable-next-line no-var-requires\nconst pkg = require('../../package.json');\nfunction isReadableStream(obj) {\n    return obj instanceof stream.Readable && typeof obj._read === 'function';\n}\nfunction getMissingParams(params, required) {\n    const missing = new Array();\n    required.forEach(param => {\n        // Is the required param in the params object?\n        if (params[param] === undefined) {\n            missing.push(param);\n        }\n    });\n    // If there are any required params missing, return their names in array,\n    // otherwise return null\n    return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n    if (callback) {\n        createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n    }\n    else {\n        return createAPIRequestAsync(parameters);\n    }\n}\nexports.createAPIRequest = createAPIRequest;\nfunction createAPIRequestAsync(parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let params = parameters.params;\n        const options = Object.assign({}, parameters.options);\n        // Create a new params object so it can no longer be modified from outside\n        // code Also support global and per-client params, but allow them to be\n        // overriden per-request\n        const topOptions = parameters.context.google ?\n            parameters.context.google._options.params :\n            {};\n        params = Object.assign({}, // New base object\n        topOptions, // Global params\n        parameters.context._options.params, // Per-client params\n        params // API call params\n        );\n        const media = params.media || {};\n        /**\n         * In a previous version of this API, the request body was stuffed in a field\n         * named `resource`.  This caused lots of problems, because it's not uncommon\n         * to have an actual named parameter required which is also named `resource`.\n         * This mean that users would have to use `resource_` in those cases, which\n         * pretty much nobody figures out on their own. The request body is now\n         * documented as being in the `requestBody` property, but we also need to keep\n         * using `resource` for reasons of back-compat. Cases that need to be covered\n         * here:\n         * - user provides just a `resource` with a request body\n         * - user provides both a `resource` and a `resource_`\n         * - user provides just a `requestBody`\n         * - user provides both a `requestBody` and a `resource`\n         */\n        const resource = params.requestBody ? params.requestBody : params.resource;\n        if (!params.requestBody && params.resource) {\n            delete params.resource;\n        }\n        delete params.requestBody;\n        let authClient = params.auth || parameters.context._options.auth ||\n            (parameters.context.google ? parameters.context.google._options.auth :\n                null);\n        const defaultMime = typeof media.body === 'string' ?\n            'text/plain' :\n            'application/octet-stream';\n        delete params.media;\n        delete params.auth;\n        // Grab headers from user provided options\n        const headers = params.headers || {};\n        delete params.headers;\n        // Un-alias parameters that were modified due to conflicts with reserved names\n        Object.keys(params).forEach(key => {\n            if (key.slice(-1) === '_') {\n                const newKey = key.slice(0, -1);\n                params[newKey] = params[key];\n                delete params[key];\n            }\n        });\n        // Check for missing required parameters in the API request\n        const missingParams = getMissingParams(params, parameters.requiredParams);\n        if (missingParams) {\n            // Some params are missing - stop further operations and inform the\n            // developer which required params are not included in the request\n            throw new Error('Missing required parameters: ' + missingParams.join(', '));\n        }\n        // Parse urls\n        if (options.url) {\n            options.url = urlTemplate.parse(options.url).expand(params);\n        }\n        if (parameters.mediaUrl) {\n            parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n        }\n        // When forming the querystring, override the serializer so that array\n        // values are serialized like this:\n        // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n        // This serializer also encodes spaces in the querystring as `%20`,\n        // whereas the default serializer in gaxios encodes to a `+`.\n        options.paramsSerializer = (params) => {\n            return qs.stringify(params, { arrayFormat: 'repeat' });\n        };\n        // delete path parameters from the params object so they do not end up in\n        // query\n        parameters.pathParams.forEach(param => {\n            delete params[param];\n        });\n        // if authClient is actually a string, use it as an API KEY\n        if (typeof authClient === 'string') {\n            params.key = params.key || authClient;\n            authClient = undefined;\n        }\n        if (parameters.mediaUrl && media.body) {\n            options.url = parameters.mediaUrl;\n            if (resource) {\n                // gaxios doesn't support multipart/related uploads, so it has to\n                // be implemented here.\n                params.uploadType = 'multipart';\n                const multipart = [\n                    { 'Content-Type': 'application/json', body: JSON.stringify(resource) }, {\n                        'Content-Type': media.mimeType || (resource && resource.mimeType) || defaultMime,\n                        body: media.body // can be a readable stream or raw string!\n                    }\n                ];\n                const boundary = uuid.v4();\n                const finale = `--${boundary}--`;\n                const rStream = new stream.PassThrough({\n                    flush(callback) {\n                        this.push('\\r\\n');\n                        this.push(finale);\n                        callback();\n                    }\n                });\n                const pStream = new ProgressStream();\n                const isStream = isReadableStream(multipart[1].body);\n                headers['Content-Type'] = `multipart/related; boundary=${boundary}`;\n                for (const part of multipart) {\n                    const preamble = `--${boundary}\\r\\nContent-Type: ${part['Content-Type']}\\r\\n\\r\\n`;\n                    rStream.push(preamble);\n                    if (typeof part.body === 'string') {\n                        rStream.push(part.body);\n                        rStream.push('\\r\\n');\n                    }\n                    else {\n                        // Gaxios does not natively support onUploadProgress in node.js.\n                        // Pipe through the pStream first to read the number of bytes read\n                        // for the purpose of tracking progress.\n                        pStream.on('progress', bytesRead => {\n                            if (options.onUploadProgress) {\n                                options.onUploadProgress({ bytesRead });\n                            }\n                        });\n                        part.body.pipe(pStream).pipe(rStream);\n                    }\n                }\n                if (!isStream) {\n                    rStream.push(finale);\n                    rStream.push(null);\n                }\n                options.data = rStream;\n            }\n            else {\n                params.uploadType = 'media';\n                Object.assign(headers, { 'Content-Type': media.mimeType || defaultMime });\n                options.data = media.body;\n            }\n        }\n        else {\n            options.data = resource || undefined;\n        }\n        options.headers = headers;\n        options.params = params;\n        if (!isbrowser_1.isBrowser()) {\n            options.headers['Accept-Encoding'] = 'gzip';\n            const directives = options.userAgentDirectives || [];\n            directives.push({\n                product: 'google-api-nodejs-client',\n                version: pkg.version,\n                comment: 'gzip'\n            });\n            const userAgent = directives\n                .map(d => {\n                let line = `${d.product}/${d.version}`;\n                if (d.comment) {\n                    line += ` (${d.comment})`;\n                }\n                return line;\n            })\n                .join(' ');\n            options.headers['User-Agent'] = userAgent;\n        }\n        // By default gaxios treats any 2xx as valid, and all non 2xx status\n        // codes as errors.  This is a problem for HTTP 304s when used along\n        // with an eTag.\n        if (!options.validateStatus) {\n            options.validateStatus = (status) => {\n                return (status >= 200 && status < 300) || status === 304;\n            };\n        }\n        // Combine the GaxiosOptions options passed with this specific\n        // API call witht the global options configured at the API Context\n        // level, or at the global level.\n        const mergedOptions = Object.assign({}, (parameters.context.google ? parameters.context.google._options : {}), parameters.context._options, options);\n        delete mergedOptions.auth; // is overridden by our auth code\n        // Perform the HTTP request.  NOTE: this function used to return a\n        // mikeal/request object. Since the transition to Axios, the method is\n        // now void.  This may be a source of confusion for users upgrading from\n        // version 24.0 -> 25.0 or up.\n        if (authClient && typeof authClient === 'object') {\n            return authClient.request(mergedOptions);\n        }\n        else {\n            return (new google_auth_library_1.DefaultTransporter()).request(mergedOptions);\n        }\n    });\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // tslint:disable-next-line: no-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', this.bytesRead);\n        this.push(chunk);\n        callback();\n    }\n}\n"},"lineCount":262}},"hash":"14723356eb30684124bb1570262e73e8","cacheData":{"env":{}}}